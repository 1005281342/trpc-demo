// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/1005281342/trpc-demo/helloworld/helloworld.trpc.go

// Package helloworld is a generated GoMock package.
package helloworld

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockHelloWorldServiceService is a mock of HelloWorldServiceService interface.
type MockHelloWorldServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldServiceServiceMockRecorder
}

// MockHelloWorldServiceServiceMockRecorder is the mock recorder for MockHelloWorldServiceService.
type MockHelloWorldServiceServiceMockRecorder struct {
	mock *MockHelloWorldServiceService
}

// NewMockHelloWorldServiceService creates a new mock instance.
func NewMockHelloWorldServiceService(ctrl *gomock.Controller) *MockHelloWorldServiceService {
	mock := &MockHelloWorldServiceService{ctrl: ctrl}
	mock.recorder = &MockHelloWorldServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorldServiceService) EXPECT() *MockHelloWorldServiceServiceMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockHelloWorldServiceService) Hello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", ctx, req)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockHelloWorldServiceServiceMockRecorder) Hello(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHelloWorldServiceService)(nil).Hello), ctx, req)
}

// MockHelloWorldServiceClientProxy is a mock of HelloWorldServiceClientProxy interface.
type MockHelloWorldServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldServiceClientProxyMockRecorder
}

// MockHelloWorldServiceClientProxyMockRecorder is the mock recorder for MockHelloWorldServiceClientProxy.
type MockHelloWorldServiceClientProxyMockRecorder struct {
	mock *MockHelloWorldServiceClientProxy
}

// NewMockHelloWorldServiceClientProxy creates a new mock instance.
func NewMockHelloWorldServiceClientProxy(ctrl *gomock.Controller) *MockHelloWorldServiceClientProxy {
	mock := &MockHelloWorldServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockHelloWorldServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorldServiceClientProxy) EXPECT() *MockHelloWorldServiceClientProxyMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockHelloWorldServiceClientProxy) Hello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hello", varargs...)
	ret0, _ := ret[0].(*HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hello indicates an expected call of Hello.
func (mr *MockHelloWorldServiceClientProxyMockRecorder) Hello(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockHelloWorldServiceClientProxy)(nil).Hello), varargs...)
}
